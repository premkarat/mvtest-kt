{
    "docs": [
        {
            "location": "/", 
            "text": "1. mvtest overview\n\n\n2. Prerequisite for coding\n\n\n3. mvtest directory structure overview\n\n\n4. mvtest documentation generation \n distribution\n\n\n5. mvtest github deployment \n workflow\n\n\n6. community contributions\n\n\n7. mvtest enhancements", 
            "title": "Home"
        }, 
        {
            "location": "/overview/", 
            "text": "mvtest\n is based on \npytest\n and includes the following standard modules to help perform a full-fledged automated QA on MontaVista Linux distribution.\n\n\n\n\nparamiko\n - for running commands on remote host.\n\n\npexpect\n - for interactive testing.\n\n\npytest-html\n - for generating HTML reports.\n\n\ncolorlog\n - for log formatting with colors in console.\n\n\nansi2html\n - Convert text with ANSI color codes to HTML.\n\n\nsphinx\n - for automatic documentation generation.", 
            "title": "mvtest overview"
        }, 
        {
            "location": "/prerequisite/", 
            "text": "python\n - top 3 books to learn python (IMHO)\n\n\npython Essential Reference 4ed by David Beazley\n\n\npython cookbook by David Beazley\n\n\nFluent Python by Luciano Ramalho\n\n\n\n\n\n\npytest\n - learning resources\n\n\npytest-doc\n\n\nquick overview\n\n\n3 hours training on pytest\n\n\nAdvance fixtures training\n\n\nvarious other talks\n\n\npython testing with pytest\n\n\n\n\n\n\nmost important mvtest APIs\n\n\nExpectShell API\n for interactive testing\n\n\nRemoteMachine API\n for running commands on remote host\n\n\nrun_cmd API\n for running commands locally\n\n\nget_status_output API\n if command exit status and output is needed.\n\n\n\n\n\n\ncustom logging levels\n implemented using \ncustom_logger\n\n    mvtest uses following \ncustom logging levels\n  \n\n\nlog.command\n for COMMAND logging\n\n\nlog.texitcode\n for EXIT_CODE logging\n\n\nlog.output\n for OUTPUT logging\n\n\nlog.tpass\n for PASS logging\n\n\nlog.tfail\n for FAIL logging", 
            "title": "Prerequisite for coding"
        }, 
        {
            "location": "/directory/", 
            "text": "apis\n\n\nkernutils\n contains commonly used functions for kernel related testing.\n\n\nnetutils\n contains commonly used functions for network related testing\n\n\nutils\n contains general purpose utility APIs. This file has ExpectShell, RemoteMachine, run_cmd etc.. API's\n\n\n\n\n\n\nconftest.py\n  \n\n\nOne of the usecases of conftest is to implement a local plugin. A plugin contains one or multiple hook functions. \nwriting hook functions\n explains how to write hooks in pytest. We use \npytest_configure\n hook to enhance the default HTML report with  additonal environmental details. \nHow to enhance HTML reports section\n in pytest-html page has details.\n\n\n\n\n\n\n\n\ndocs\n  \n\n\n\n\nThis folder contains all the pieces required for documentation generation. mvtest uses \nSphinx\n for HTML documentation generation. Initial mvtest documentation was generated by following this \nSphinx tutorial\n. The most important files in this directory are  \n\n\n\n\n\n\nMakefile\n used for generating docs using make command. \nMakefile options\n section explains customizing Makefile.\n\n\n\n\n\n\nconf.py\n controls the basics of how sphinx runs when you run a build. For example, mvtest uses \nreadthedocs\n theme by specifying the \nhtml_theme\n config parameter. \nBasic Configuration\n tutorial explains how to modify the conf.py file\n\n\n\n\n\n\nmake \n command is used for building the documentation. \nlist of available builders\n shows the options that can be used with \nmake\n command. mvtest users \nmake html\n to generate mvtest documentation.\n\n\n\n\n\n\n\n\n\n\n\n\nlicense.txt\n\n\n\n\nHas MIT license information\n\n\n\n\n\n\npytest.ini\n\n\nThis is the configuration file used by pytest. \nBasic test configuration\n can be configured usign this file. Various configurations parameters for pytest.ini can be found \nhere\n\n\n\n\n\n\nREADME.md\n\n\nREADME file in Markdown format required for github.\n\n\n\n\n\n\n\n\nrequirements.txt\n\n\n\n\nHas a list of dependency packages, along wth supported versions, required for mvtest to work. Detailed documentation of requirements.txt file can be found \nhere\n\n\n\n\n\n\n\n\nsuites\n\n\n\n\nThis folder has all the tests organized based on various profiles supported by MontaVista Linux distributions.", 
            "title": "mvtest directory structure overview"
        }, 
        {
            "location": "/doc/", 
            "text": "mvtest documentation is hosted using \ngithub pages\n\n\nDocumentation 101:\n\n\nTwo possible ways to generate documentation from plain text is to use \n\n\n\n\nmarkdown (md)\n - \na primer on markdown\n\n    or  \n\n\nreStructuredText (rst)\n - \na primer on rst\n\n\n\n\nmvtest uses \nSphinx\n for HTML documentation generation, which is based on \nrestructuredText(rst)\n and it automatically document our tests and APIs using \nautofunction\n. So to document the tests and APIs, all you have to do is to use \npython docstrings\n in the tests \n APIs (modules, functions, classes, and methods)\n\n\nHere is an \nexample on how to document python docstrings\n\n\nMarkdown\n is best suited for writing for the web where as \nreStructuredText(rst)\n is best suite for writing techincal documentation.\n\n\nHere is an \ninteresting read on markdown vs rst\n\n\nGithub pages\n supports \nJekyll\n for documentation generaton. Jekyll supports Markdown format. Since mvtest uses Sphinx(rst format) for doc generation, this \nwonderful blog\n helped us to publish Sphinx generated docs on github.\n\n\nmvtest document setup\n\n\nmvtest doc setup involved following steps\n\n 1. \nsetting up mvtest repo\n\n 2. \nsetting up sphinx in mvtest repo\n\n 3. \nsetting up mvtestdocs repo\n\n 4. \nMakefile changes\n\n 5. \nDefining documentation structure\n\n 6. \nAutomatic document generation using autodoc\n\n\nmvtest document generation workflow\n\n\nSteps to be followed in mvtest repo\n\n\n\n\nAdd test function (\ndef test_\n) in test module (\ntest_xx.py\n) or APIs (\napis/xxx.py\n) in \nmvtest repo\n and ensure it has \npython docstrings\n as per \nrst format\n\n\n\n\nIf the test or API module already exits as an \nautomodule\n directive in \ntest.rst\n or \napis.rst\n file, then any new test function or API function with docstrings will automatically be included in the documentation.\n\n\n\n\n\n\nIf the test or API module is new, then use the \nautodoc mechanism\n and \nautomodule directive\n to add the module in test.rst or apis.rst file found under \ndocs/\n folder. For example to add the \nutils.py\n API module, the following automodule directive was used in \napis.rst\n\n\n\n\n\n\n   utils\n   -----\n\n   .. automodule:: apis.utils\n       :members:\n\n\n\n\n\n\n\n\nRun git add .\n\n\n\n\n\n\nRun git commit\n\n\n\n\n\n\ncd docs\n\n\n\n\n\n\nmake html\n\n\n\n\n\n\ngit push origin master\n\n\n\n\n\n\nSteps to be followed in mvtestdocs repo\n\n\n\n\n\n\ncd html\n\n\n\n\n\n\ngit branch (to ensure you are in gh-pages branch)\n\n\n\n\n\n\ngit add .\n\n\n\n\n\n\ngit commit\n\n\n\n\n\n\ngit push origin gh-pages", 
            "title": "mvtest documentation generation & distribution"
        }, 
        {
            "location": "/doc/#documentation-101", 
            "text": "Two possible ways to generate documentation from plain text is to use    markdown (md)  -  a primer on markdown \n    or    reStructuredText (rst)  -  a primer on rst   mvtest uses  Sphinx  for HTML documentation generation, which is based on  restructuredText(rst)  and it automatically document our tests and APIs using  autofunction . So to document the tests and APIs, all you have to do is to use  python docstrings  in the tests   APIs (modules, functions, classes, and methods)  Here is an  example on how to document python docstrings  Markdown  is best suited for writing for the web where as  reStructuredText(rst)  is best suite for writing techincal documentation.  Here is an  interesting read on markdown vs rst  Github pages  supports  Jekyll  for documentation generaton. Jekyll supports Markdown format. Since mvtest uses Sphinx(rst format) for doc generation, this  wonderful blog  helped us to publish Sphinx generated docs on github.", 
            "title": "Documentation 101:"
        }, 
        {
            "location": "/doc/#mvtest-document-setup", 
            "text": "mvtest doc setup involved following steps \n 1.  setting up mvtest repo \n 2.  setting up sphinx in mvtest repo \n 3.  setting up mvtestdocs repo \n 4.  Makefile changes \n 5.  Defining documentation structure \n 6.  Automatic document generation using autodoc", 
            "title": "mvtest document setup"
        }, 
        {
            "location": "/doc/#mvtest-document-generation-workflow", 
            "text": "Steps to be followed in mvtest repo   Add test function ( def test_ ) in test module ( test_xx.py ) or APIs ( apis/xxx.py ) in  mvtest repo  and ensure it has  python docstrings  as per  rst format   If the test or API module already exits as an  automodule  directive in  test.rst  or  apis.rst  file, then any new test function or API function with docstrings will automatically be included in the documentation.    If the test or API module is new, then use the  autodoc mechanism  and  automodule directive  to add the module in test.rst or apis.rst file found under  docs/  folder. For example to add the  utils.py  API module, the following automodule directive was used in  apis.rst       utils\n   -----\n\n   .. automodule:: apis.utils\n       :members:    Run git add .    Run git commit    cd docs    make html    git push origin master    Steps to be followed in mvtestdocs repo    cd html    git branch (to ensure you are in gh-pages branch)    git add .    git commit    git push origin gh-pages", 
            "title": "mvtest document generation workflow"
        }, 
        {
            "location": "/github/", 
            "text": "Setting up mvtest repo in github\n\n\n\n\nSetup mvtest git\n and \nauthenticate with github from git\n\n\nCreate mvtest repo in github\n  \nwithout\n initializing the repository with a README\n\n\ngit remote add origin \nhttps://github.com/MontaVista-OpenSourceTechnology/mvtest.git\n\n\ngit push -u origin master\n\n\n\n\nSetting up mvtestdocs repo in github\n\n\n\n\nSetup mvtestdocs git\n\n\nCreate mvtestdocs repo\n  \nwithout\n initializing the repository with a README\n\n\ngit remote add origin \nhttps://github.com/MontaVista-OpenSourceTechnology/mvtestdocs.git\n\n\ngit push -u origin master\n\n\n\n\nContributing code to mvtest\n\n\nI have not maintained a repo, so please cross check with github documentation to verify the correct workflow.\n\n\n\n\nUnderstand how fork works and create a fork of mvtest repo\n\n\nCreate a pull request from fork\n\n\nAllow changes to pull request\n\n\nCommit changes to pull request", 
            "title": "mvtest github deployment & workflow"
        }, 
        {
            "location": "/community/", 
            "text": "Added ANSI support in html report.\n\n  The complete patch and discussion can be tracked in this \npull request", 
            "title": "community contributions"
        }, 
        {
            "location": "/enhancements/", 
            "text": "Currently we use \nparamiko\n for running commands on remote host, a better module would be \nfabric\n\n\nExpectShell API\n could be improved further depending on usage", 
            "title": "mvtest enhancements"
        }
    ]
}